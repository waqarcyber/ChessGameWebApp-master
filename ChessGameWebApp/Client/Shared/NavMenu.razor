@using ChessGameClient.Models;
@using ChessGame
@inject SiteUserInfo user
@implements IChessObserver
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ChessGameWebApp</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @if (user.Roles.Contains("user"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="game">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Game
                </NavLink>
            </div>
        }

        @if (user.Roles.Contains("admin"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="adminpanel">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Admin Panel
                </NavLink>
            </div>
        }

    </nav>
</div>


@code {
    
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    
    protected override void OnInitialized()
    {
        ((IChessObservable)user).Subscribe(this);
    }
    
    public Task UpdateAsync()
    {
        StateHasChanged();
        
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        ((IChessObservable)user).Remove(this);
    }
}
