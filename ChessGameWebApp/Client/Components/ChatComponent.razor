@using ChessGameClient.Models;
@using ChessGameWebApp.Client.Pages
@using ChessGameClient.Services
@using Microsoft.AspNetCore.SignalR.Client;
@using ChessGameWebApp.Client.Components
@inject NavigationManager navigationManager
@implements IAsyncDisposable
@inject SiteUserInfo userInfo
@inject IJSRuntime JsRuntime
@inject IGameHubService gameHub
@inject List<ChatMessage> messages
@inject IChatHubService chatHub

<div class="form-group">
    <label>
        <input @bind="messageInput" size="50" />
    </label>
    <button class="btn btn-primary" @onclick="Send" disabled="@(!IsConnected)">Send</button>
</div>

<hr>

<div class="messagesList">
    <ul>
    @foreach (var message in messages)
    {
        <li>
            <button type="button" class="btn btn-primary" disabled="@(!IsConnected || userInfo.Id == message.AccountId)" @onclick="() => SendInvite(message.AccountId, message.Username)">Invite</button>
            <small>@($"{message.Time:hh\\:mm\\:ss}")</small>
            <b>@message.Username: </b>
            @message.Message
        </li>
    }
    </ul>
</div>


@code {

    private string messageInput;

    private async void SendInvite(int accountId, string username)
    {
        await gameHub.SendInvite(accountId, username);
    }

    protected override async Task OnInitializedAsync()
    {
        chatHub.SetUpdater(() => InvokeAsync(StateHasChanged));
        await chatHub.Start();
    }

    private async Task Send()
    {
        if (messageInput == "")
            return;

        await chatHub.Send(messageInput);

        messageInput = "";
    }

    public bool IsConnected => chatHub.IsConnected;

    public async ValueTask DisposeAsync()
    {
        await chatHub.DisposeAsync();
    }
}